#!/usr/bin/env bash

function error(){
  {
   cat << ERR >&2 
Sorry. An error has occurred :_(
Refer "exutils help" for how to use the command.
ERR
   exit 1
  }
}

function usage(){
  {
   cat << EOS
Commands:
  exutils prim [OPTION] [NUMBER]         # Print prime numbers of given NUMBER.
  exutils camb [OPTION] [NUMBER]         # Displays standard input while convolving.
  exutils divi [OPTION] [NUMBER]         # Display divisor of given NUMBER.
  exutils inv  [OPTION] [ARRAYS]         # Inverts the permutation of the array.
  exutils rpt [OPTION] [STRING] [NUMBER] # Generates the given STRING a specified NUMBER of times.
  exutils ngram [OPTION] [STRING]        # Displays the N-gram of the passed string.
  exutils stalin [OPTION] [ELEMENTS]     # Excutes the Stalin sort algorithm with the calculation 
                                           amount O(n) for the passed elements.
  exutils help [COMMAND]                 # Describe available commands or one specific command.
  exutils version                        # Show version and info
EOS
  }
}

function prim(){
  {
   cat << EOS
Usage: prim [OPTION]... FIRST 
   or: prim [OPTION]... FIRST LAST 
   or: prim [OPTION]... FIRST INCREMENT LAST 
Print prime numbers from FIRST to LAST, in steps of INCREMENT.

Options: 
  -s ,--separator=[SEPARATOR] Use STRING to separate numbers (default: n) 
  -f ,--format=[FORMAT]       Use printf style FORMAT
  -w, --equal-width           Equalize width by padding with leading zeroes
  -h, --help                  Display this help and exit 
  -v, --version               Output version information
EOS
  }
}

function camb(){
  {
   cat << EOS
Usage: camb [OPTION] [NUMBER] 
Displays standard input while convolving with the given NUMBER.

If NUMBER is not given, NUMBER is automatically interpreted as 1.
NUMBER cannot be set to a value less than 0.

Option: 
  -r, --right      Display with right convolving 
  -h, --help       Show usage 
  -v, --version    Show version and info 

TL;DR 
  $ seq -w 10 | camb 5 
  01 02 03 04 05 
  02 03 04 05 06 
  03 04 05 06 07 
  04 05 06 07 08 
  05 06 07 08 09 
  06 07 08 09 10
EOS
  }
}

function divi(){
  {
   cat << EOS
Usage: divi [OPTION] [NUMBER] 
Display divisor of given NUMBER. 

Option: 
  -r, --reverse    Displays divisors in reverse order 
  -h, --help       Show usage 
  -v, --version    Show version and info

TL;DR 
  $ divi 100 
  1 2 4 5 10 20 25 50 100

  $ seq 5 | divi -r 
  1  
  2 1  
  3 1  
  4 2 1  
  5 1
EOS
  }
}

function inv(){
  {
   cat << EOS
Usage: inv [OPTION] [ARRAYS]
Inverts the permutation of the array.

Option:
  --fs=[SEPARATOR]    Specifies the separator used for the array (Default: " ")
  -h, --help          Show usage
  -v, --version       Show version and info

TL;DR
  $ inv 1 22 345 567 3 4 4578 90000 456 13 7
  7 13 456 90000 4578 4 3 567 345 22 1

  $ echo 1,22,345,567,3,4 | inv --fs=,
  4,3,567,345,22,1
EOS
   exit 0
  }
}

function ngram(){
  {
   cat << EOS
Usage: ngram [OPTION] [STRING]
Displays the N-gram of the passed string.

Option:
  -h, --help          Show usage
  -v, --version       Show version and info

TL;DR
  $ ngram 高須クリニック
  高須クリニック高
  須クリニック高須
  クリニック高須ク
  リニック高須クリ
  ニック高須クリニ
  ック高須クリニッ
  ク高須クリニック

  $ echo 響け！ユーフォニアム | ngram
  響け！ユーフォニアム響
  け！ユーフォニアム響け
  ！ユーフォニアム響け！
  ユーフォニアム響け！ユ
  ーフォニアム響け！ユー
  フォニアム響け！ユーフ
  ォニアム響け！ユーフォ
  ニアム響け！ユーフォニ
  アム響け！ユーフォニア
  ム響け！ユーフォニアム
EOS
   exit 0
  }
}

function stalin(){
  {
   cat << EOS
Usage: stalin [OPTION] [ELEMENTS]
Excutes the Stalin sort algorithm with the calculation amount O(n) for the passed elements.

Option:
  -h, --help          Show usage
  -v, --version       Show version and info

TL;DR
  $ stalin 9 8 7 6 5 4 3 2 1
  9

  $ echo 1 1 3 5 2 9 8 7 4 2 9 10 | stalin
  1 1 3 5 9 9 10
EOS
   exit 0
  }
}

function rpt(){
  {
   cat << EOS
Usage: ${0##*/} [OPTION] [STRING] [NUMBER]
Generates the given STRING a specified NUMBER of times.

Option:
  --del=[DELIMITER]   Specify the delimiter (default: \n)
  -h, --help          Show usage
  -v, --version       Show version and info

TL;DR
  $ rpt 🔴🔴🔴⚪️⚪️⚪️🔵🔵🔵⚪️⚪️⚪️ 13
  🔴🔴🔴⚪️⚪️⚪️🔵🔵🔵⚪️⚪️⚪️
  🔴🔴🔴⚪️⚪️⚪️🔵🔵🔵⚪️⚪️⚪️
  🔴🔴🔴⚪️⚪️⚪️🔵🔵🔵⚪️⚪️⚪️
  🔴🔴🔴⚪️⚪️⚪️🔵🔵🔵⚪️⚪️⚪️
  🔴🔴🔴⚪️⚪️⚪️🔵🔵🔵⚪️⚪️⚪️
  🔴🔴🔴⚪️⚪️⚪️🔵🔵🔵⚪️⚪️⚪️
  🔴🔴🔴⚪️⚪️⚪️🔵🔵🔵⚪️⚪️⚪️
  🔴🔴🔴⚪️⚪️⚪️🔵🔵🔵⚪️⚪️⚪️
  🔴🔴🔴⚪️⚪️⚪️🔵🔵🔵⚪️⚪️⚪️
  🔴🔴🔴⚪️⚪️⚪️🔵🔵🔵⚪️⚪️⚪️
  🔴🔴🔴⚪️⚪️⚪️🔵🔵🔵⚪️⚪️⚪️
  🔴🔴🔴⚪️⚪️⚪️🔵🔵🔵⚪️⚪️⚪️
  🔴🔴🔴⚪️⚪️⚪️🔵🔵🔵⚪️⚪️⚪️

  $ echo 響け！ユーフォニアム | rpt --del=, 4
  響け！ユーフォニアム,響け！ユーフォニアム,響け！ユーフォニアム,響け！ユーフォニアム
EOS
   exit 0
  }
}

function perse_com(){
  if [[ -z "${1}" ]]; then
    usage
  elif [[ "${1}" == prim ]]; then
    prim
  elif [[ "${1}" == camb ]]; then
    camb
  elif [[ "${1}" == divi ]]; then
    divi
  elif [[ "${1}" == inv ]]; then
    inv
  elif [[ "${1}" == ngram ]]; then
    ngram
  elif [[ "${1}" == stalin ]]; then
    stalin
  elif [[ "${1}" == rpt ]]; then
    rpt
  else
    error
  fi
}

{
 perse_com "${@}"
}